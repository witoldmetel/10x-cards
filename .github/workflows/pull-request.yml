name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]
    workflow_dispatch:
    paths:
      - 'Client/**'
      - '.github/workflows/pull-request.yml'

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Client

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: './Client/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint -- --max-warnings=9999

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Client

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: './Client/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests
        run: npm run test

      # - name: Upload Unit Test Coverage
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: unit-test-coverage
      #     path: ./Client/coverage/
      #     retention-days: 30

  e2e-test:
    name: E2E Tests
    needs: lint
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment:
      name: Production
    defaults:
      run:
        working-directory: ./Client

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: ten_x_cards_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: TenX@2024!SecurePass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: './Client/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Setup .NET for API
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Check if secrets exist
        id: check-secrets
        run: |
          if [ -z "$JWT_SECRET_KEY" ]; then
            echo "✗ JWT secret key is missing"
            exit 1
          fi
          echo "✓ JWT secret key is present"
        env:
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Setup Database
        working-directory: ./API
        run: |
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U postgres; do
            sleep 2
          done
          echo "PostgreSQL is ready!"

          # Install and run migrations
          dotnet tool install --global dotnet-ef
          dotnet ef database update --project ./TenXCards.Infrastructure --startup-project ./TenXCards.Api
        env:
          ConnectionStrings__DefaultConnection: "Server=localhost;Port=5432;Database=ten_x_cards_db;User Id=postgres;Password=TenX@2024!SecurePass;Pooling=true"

      - name: Start Backend API
        working-directory: ./API
        run: |
          dotnet restore ./TenXCards.Api/TenXCards.Api.csproj
          dotnet build ./TenXCards.Api/TenXCards.Api.csproj --configuration Release --no-restore
          dotnet run --project ./TenXCards.Api/TenXCards.Api.csproj --configuration Release &
        env:
          DOTNET_ENVIRONMENT: Development
          ConnectionStrings__DefaultConnection: "Server=localhost;Port=5432;Database=ten_x_cards_db;User Id=postgres;Password=TenX@2024!SecurePass;Pooling=true"
          JWT__Key: ${{ secrets.JWT_SECRET_KEY }}
          JWT__Issuer: "http://localhost:5001"
          JWT__Audience: "http://localhost:5173"

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Start Frontend Dev Server
        run: npm run dev &

      - name: Wait for Services
        run: |
          echo "Waiting for services to start..."
          sleep 15

      - name: Run Playwright tests
        run: npx playwright test
        env:
          JWT__Key: ${{ secrets.JWT_SECRET_KEY }}
          JWT__Issuer: "http://localhost:5001"
          JWT__Audience: "http://localhost:5173"

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ./Client/playwright-report/
          retention-days: 30

  # status-comment:
  #   name: PR Status Comment
  #   needs: [unit-test, e2e-test]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Download Unit Test Coverage
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: unit-test-coverage
  #         path: unit-coverage

  #     - name: Download E2E Test Results
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: playwright-report
  #         path: e2e-results

  #     - name: Create Status Comment
  #       uses: actions/github-script@v7
  #       with:
  #         script: |
  #           const unitCoverage = require('./unit-coverage/coverage-summary.json');
  #           const e2eResults = require('./e2e-results/report.json');
            
  #           const comment = `## Pull Request Check Results
            
  #           ### Unit Tests Coverage
  #           - Statements: ${unitCoverage.total.statements.pct}%
  #           - Branches: ${unitCoverage.total.branches.pct}%
  #           - Functions: ${unitCoverage.total.functions.pct}%
  #           - Lines: ${unitCoverage.total.lines.pct}%

  #           ### E2E Tests Summary
  #           - Total Tests: ${e2eResults.stats.total}
  #           - Passed: ${e2eResults.stats.passed}
  #           - Failed: ${e2eResults.stats.failed}
  #           - Duration: ${e2eResults.stats.duration}ms
            
  #           [View detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
  #           `;
            
  #           github.rest.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.name,
  #             body: comment
  #           }); 